import { ethers } from "hardhat";

async function main() {
  console.log("=== LuckySpinFHE Demo ===\n");

  // Deploy contract
  console.log("1. Deploying LuckySpinFHE contract...");
  const LuckySpinFHE = await ethers.getContractFactory("LuckySpinFHE");
  const luckySpinFHE = await LuckySpinFHE.deploy();
  await luckySpinFHE.waitForDeployment();
  const contractAddress = await luckySpinFHE.getAddress();
  console.log(`Contract deployed to: ${contractAddress}\n`);

  // Get signers
  const [owner, user1, user2, user3] = await ethers.getSigners();

  // Add pool rewards
  console.log("2. Adding pool rewards...");
  await luckySpinFHE.addPool("Gold", "gold.png", 1000);
  await luckySpinFHE.addPool("Silver", "silver.png", 500);
  await luckySpinFHE.addPool("Bronze", "bronze.png", 100);
  await luckySpinFHE.addPool("Copper", "copper.png", 50);
  console.log("Added 4 pool rewards\n");

  // Show pool rewards
  console.log("3. Pool rewards:");
  const poolCount = await luckySpinFHE.poolCount();
  for (let i = 0; i < poolCount; i++) {
    const [name, imageUrl, value] = await luckySpinFHE.getPoolReward(i);
    console.log(`  Pool ${i}: ${name} - ${imageUrl} - Value: ${value}`);
  }
  console.log();

  // Simulate user interactions (with mock encrypted data)
  console.log("4. Simulating user interactions...");
  
  // User 1 check-in
  console.log("User 1 checking in...");
  const encryptedSpins = "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef";
  const attestation = "0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890";
  await luckySpinFHE.connect(user1).checkIn(encryptedSpins, attestation);
  console.log("✓ User 1 checked in\n");

  // User 1 spin
  console.log("User 1 spinning...");
  const encryptedPoolIndex = "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef";
  const encryptedPoint = "0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890";
  const attestationPool = "0x1111111111111111111111111111111111111111111111111111111111111111";
  const attestationPoint = "0x2222222222222222222222222222222222222222222222222222222222222222";
  await luckySpinFHE.connect(user1).spinAndClaimReward(
    encryptedPoolIndex,
    encryptedPoint,
    attestationPool,
    attestationPoint
  );
  console.log("✓ User 1 spun and claimed reward\n");

  // User 1 make score public
  console.log("User 1 making score public...");
  await luckySpinFHE.connect(user1).makeScorePublic();
  console.log("✓ User 1 score made public\n");

  // Submit scores to leaderboard
  console.log("5. Submitting scores to leaderboard...");
  await luckySpinFHE.submitPublicScore(user1.address, 150);
  await luckySpinFHE.submitPublicScore(user2.address, 200);
  await luckySpinFHE.submitPublicScore(user3.address, 100);
  console.log("✓ Scores submitted\n");

  // Show leaderboard
  console.log("6. Leaderboard:");
  const leaderboard = await luckySpinFHE.getLeaderboard();
  leaderboard.forEach((entry: any, index: number) => {
    console.log(`  ${index + 1}. ${entry.user} - Score: ${entry.score}`);
  });
  console.log();

  // Show encrypted user data
  console.log("7. Encrypted user data (for demonstration):");
  const encryptedSpinCount1 = await luckySpinFHE.getEncryptedSpinCount(user1.address);
  const encryptedScore1 = await luckySpinFHE.getEncryptedScore(user1.address);
  const encryptedLastRewardIndex1 = await luckySpinFHE.getEncryptedLastRewardIndex(user1.address);
  
  console.log(`User 1 encrypted spin count: ${encryptedSpinCount1}`);
  console.log(`User 1 encrypted score: ${encryptedScore1}`);
  console.log(`User 1 encrypted last reward index: ${encryptedLastRewardIndex1}`);
  console.log();

  console.log("=== Demo completed successfully! ===");
  console.log("\nNote: In real implementation:");
  console.log("- Encrypted data would be generated by Relayer SDK");
  console.log("- Users would decrypt their own data using FHE.allow");
  console.log("- Scores would be verified before submitting to leaderboard");
  console.log("- Frontend would handle random generation and point calculation");
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  }); 